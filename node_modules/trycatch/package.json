{
  "name": "trycatch",
  "version": "0.1.2",
  "description": "An asynchronous exception handler with long stack traces for node.js",
  "homepage": "http://github.com/CrabDude/trycatch",
  "repository": {
    "type": "git",
    "url": "git://github.com/CrabDude/trycatch.git"
  },
  "bugs": {
    "url": "http://github.com/CrabDude/trycatch/issues"
  },
  "author": {
    "name": "Adam Crabtree",
    "email": "dude@noderiety.com",
    "url": "http://noderiety.com"
  },
  "main": "lib/trycatch",
  "directories": {
    "lib": "./lib/"
  },
  "engines": {
    "node": ">=0.2.0"
  },
  "scripts": {
    "test": "mocha --reporter spec ./test/*.js"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.html"
    }
  ],
  "dependencies": {
    "colors": ">=0.5.0 <0.6"
  },
  "keywords": [
    "error",
    "exception",
    "try",
    "catch",
    "stack",
    "trace"
  ],
  "devDependencies": {
    "mocha": "~1.4.0",
    "underscore": "~1.3.3"
  },
  "readme": "trycatch\n=======\n\nAn asynchronous try catch exception handler with long stack traces for node.js\n\n**Now PRODUCTION Ready!**\n\nWith the update to 0.1.0, stack traces are now lazy, and all try/catch blocks conform to [V8 best practices](https://github.com/joyent/node/wiki/Best-practices-and-gotchas-with-v8).\n\n\n\nInstall\n-------\n\n\tnpm install trycatch\n\nUse\n---\n\nBecause trycatch shims all native I/O calls, it must be required before any other modules.\n\n\tvar trycatch = require('trycatch')\n\ttrycatch(fnTry, fnCatch)\n\nBasic Example\n-------------\n\n```javascript\n\n    var trycatch = require(\"trycatch\"),\n      _ = require('underscore')._\n\n    trycatch(function() {\n      _.map(['Error 1', 'Error 2'], function foo(v) {\n        setTimeout(function() {\n          throw new Error(v)\n        }, 10)\n      })\n    }, function(err) {\n      console.log(\"Async error caught!\\n\", err.stack);\n    });\n``` \n\n#### Output\n\n![](https://raw.github.com/CrabDude/trycatch/master/screenshot.png)\n\n\nAdvanced Examples\n-------------\nSee the `/test` and `examples` directories for more use cases.\n\n\nReturning 500s on Server Request\n--------------------------------\n\n```javascript\n\thttp.createServer(function(req, res) {\n\t\ttrycatch(function() {\n\t\t\tsetTimeout(function() {\n\t\t\t\tthrow new Error('Baloney!');\n\t\t\t}, 1000);\n\t\t}, function(err) {\n\t\t\tres.writeHead(500);\n\t\t\tres.end(err.stack);\n\t\t});\n\t}).listen(8000);\n```\n\nVisit http://localhost:8000 and get your 500.\n\n\n\nThanks\n----------\n\nSpecial thanks to [Tom Robinson](https://github.com/tlrobinson) for his [long-stack-traces](https://github.com/tlrobinson/long-stack-traces) module and [Tim Caswell](https://github.com/creationix) who built out the initial hook.js code.",
  "readmeFilename": "README.md",
  "_id": "trycatch@0.1.2",
  "dist": {
    "shasum": "8146361fe2789be1e8f8ec0f63d188490737e5d7"
  },
  "_from": "trycatch"
}
